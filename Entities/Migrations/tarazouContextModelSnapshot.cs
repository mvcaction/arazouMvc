// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tarazou4.Data;
using Tarazou4.Entities;

namespace Entities.Migrations
{
    [DbContext(typeof(tarazouContext))]
    partial class tarazouContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tarazou4.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityLogTypeId");

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLogTypeId");

                    b.HasIndex("CreatedOnUtc");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLog");
                });

            modelBuilder.Entity("Tarazou4.Entities.ActivityLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ActivityLogType");
                });

            modelBuilder.Entity("Tarazou4.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultantId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<string>("DissatisfactionComment")
                        .HasMaxLength(500);

                    b.Property<int>("QuestionId");

                    b.Property<int?>("SatisfactionId");

                    b.Property<DateTime?>("SatisfactionTime");

                    b.Property<int>("Score");

                    b.Property<int>("ScoreConsultant");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SatisfactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Tarazou4.Entities.AnswerAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Size");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.ToTable("AnswerAttachment");
                });

            modelBuilder.Entity("Tarazou4.Entities.AnswerConsultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId");

                    b.Property<int>("ConsultantId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("DissatisfactionComment")
                        .HasMaxLength(500);

                    b.Property<int>("QuestionId");

                    b.Property<int>("SatisfactionId");

                    b.Property<int>("ScoreConsultant");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SatisfactionId");

                    b.ToTable("AnswerConsultant");
                });

            modelBuilder.Entity("Tarazou4.Entities.AnswerStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AnswerStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ProvinceId");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Tarazou4.Entities.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("ImmediateQuestionAllowed");

                    b.Property<int>("MaxSelectQuestionInDay");

                    b.Property<int>("Score");

                    b.Property<int>("ScoreConsultant");

                    b.Property<string>("Sheba")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("UserId");

                    b.Property<string>("VekalatCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("VekalatLocation")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Consultant");
                });

            modelBuilder.Entity("Tarazou4.Entities.ConsultantQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultantId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("Immediate");

                    b.Property<int>("QuestionId");

                    b.Property<int>("QuestionStatusId");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionStatusId");

                    b.HasIndex("StatusId");

                    b.ToTable("ConsultantQuestion");
                });

            modelBuilder.Entity("Tarazou4.Entities.ConsultantQuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultantId");

                    b.Property<int>("QuestionCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("Consultant_QuestionCategory");
                });

            modelBuilder.Entity("Tarazou4.Entities.ConsultantQuestionStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ConsultantQuestionStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.ConsultantUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultantId");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .HasMaxLength(50);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("Size");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("UserId");

                    b.ToTable("ConsultantUpload");
                });

            modelBuilder.Entity("Tarazou4.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("Amount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ExpiredTime");

                    b.Property<bool>("IsValid");

                    b.Property<int>("Number");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("Tarazou4.Entities.EmailAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("EnableSsl");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Port");

                    b.Property<bool>("UseDefaultCredentials");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("EmailAccount");
                });

            modelBuilder.Entity("Tarazou4.Entities.EmailPriority", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailPriority");
                });

            modelBuilder.Entity("Tarazou4.Entities.EmailQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("EmailAccountId");

                    b.Property<int>("EmailPriorityId");

                    b.Property<int>("EmailStatusId");

                    b.Property<bool>("IsQueue");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("ReceiverUserId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.HasIndex("EmailPriorityId");

                    b.HasIndex("EmailStatusId");

                    b.HasIndex("ReceiverUserId");

                    b.ToTable("EmailQueue");
                });

            modelBuilder.Entity("Tarazou4.Entities.EmailStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.ExternalAuthenticationRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("ExternalDisplayIdentifier");

                    b.Property<string>("ExternalIdentifier");

                    b.Property<string>("OauthAccessToken")
                        .HasColumnName("OAuthAccessToken");

                    b.Property<string>("OauthToken")
                        .HasColumnName("OAuthToken");

                    b.Property<string>("ProviderSystemName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalAuthenticationRecord");
                });

            modelBuilder.Entity("Tarazou4.Entities.Gender", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Tarazou4.Entities.GenericAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("KeyGroup")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int?>("SiteId");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("EntityId", "KeyGroup")
                        .HasName("IX_GenericAttribute_EntityId_and_KeyGroup");

                    b.ToTable("GenericAttribute");
                });

            modelBuilder.Entity("Tarazou4.Entities.GiftCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("Amount");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Remain");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GiftCard");
                });

            modelBuilder.Entity("Tarazou4.Entities.GiftCardUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("GiftCardId");

                    b.Property<bool>("IsTemp");

                    b.Property<DateTime?>("ModifiedTime");

                    b.Property<int>("OrderId");

                    b.Property<int>("UsedValue");

                    b.HasKey("Id");

                    b.HasIndex("GiftCardId");

                    b.HasIndex("OrderId");

                    b.ToTable("GiftCardUsage");
                });

            modelBuilder.Entity("Tarazou4.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DefaultCurrencyId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("FlagImageFileName")
                        .HasMaxLength(50);

                    b.Property<string>("LanguageCulture")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Published");

                    b.Property<bool>("Rtl");

                    b.Property<string>("UniqueSeoCode")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("DisplayOrder");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Tarazou4.Entities.LocaleStringResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Editable");

                    b.Property<bool>("IsHtml");

                    b.Property<int>("LanguageId");

                    b.Property<int>("LocaleStringResourceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ResourceValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocaleStringResourceTypeId");

                    b.HasIndex("ResourceName", "LanguageId")
                        .HasName("IX_LocaleStringResource");

                    b.ToTable("LocaleStringResource");
                });

            modelBuilder.Entity("Tarazou4.Entities.LocaleStringResourceType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("LocaleStringResourceType");
                });

            modelBuilder.Entity("Tarazou4.Entities.LocalizedProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<int>("LanguageId");

                    b.Property<string>("LocaleKey")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("LocaleKeyGroup")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("LocaleValue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("LocalizedProperty");
                });

            modelBuilder.Entity("Tarazou4.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("FullMessage");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200);

                    b.Property<int>("LogLevelId");

                    b.Property<string>("PageUrl");

                    b.Property<string>("ReferrerUrl");

                    b.Property<string>("ShortMessage")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOnUtc");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Tarazou4.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Deleted");

                    b.Property<int>("OrderDiscountPrice");

                    b.Property<Guid>("OrderGuid");

                    b.Property<int>("OrderPrice");

                    b.Property<int>("OrderStatusId");

                    b.Property<int>("OrderTotalPrice");

                    b.Property<DateTime?>("PaidDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentMethodSystemName");

                    b.Property<int>("PaymentStatusId");

                    b.Property<int>("QuestionId");

                    b.Property<int>("SiteId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Tarazou4.Entities.OrderConsultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultantId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OrderGuid");

                    b.Property<int>("OrderStatusId");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentDescription")
                        .HasMaxLength(2000);

                    b.Property<string>("PaymentMethodSystemName");

                    b.Property<string>("Peygiri")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("Price");

                    b.Property<int>("TransactionStatusId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("TransactionStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderConsultant");
                });

            modelBuilder.Entity("Tarazou4.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<Guid>("OrderItemGuid");

                    b.Property<int>("Price");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Tarazou4.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.PaymentStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PaymentStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.Permission", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("LoginNeed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("PermissionTypeId");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Tarazou4.Entities.PermissionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("EntityId", "EntityName")
                        .HasName("IX_AclRecord_EntityId_EntityName");

                    b.ToTable("PermissionEntity");
                });

            modelBuilder.Entity("Tarazou4.Entities.PermissionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("Tarazou4.Entities.PermissionType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PermissionType");
                });

            modelBuilder.Entity("Tarazou4.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltAttribute");

                    b.Property<bool>("IsNew");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<byte[]>("PictureBinary");

                    b.Property<string>("SeoFilename")
                        .HasMaxLength(300);

                    b.Property<string>("TitleAttribute");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("Tarazou4.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Tarazou4.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("AllowedAnsweringTime");

                    b.Property<DateTime>("CreatedOnUtc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000);

                    b.Property<bool>("Immediate");

                    b.Property<bool>("IsPay");

                    b.Property<DateTime?>("LastAnsweringTime");

                    b.Property<int>("LastStatusId");

                    b.Property<DateTime?>("LastUpdateTime");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<int>("Price");

                    b.Property<int>("QuestionCategoryId");

                    b.Property<int>("QuestionTypeId");

                    b.Property<int>("Score");

                    b.Property<int>("ScoreConsultant");

                    b.Property<int?>("SelectConsultantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LastStatusId");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SelectConsultantId");

                    b.HasIndex("UserId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Tarazou4.Entities.QuestionAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("QuestionId");

                    b.Property<int>("Size");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAttachment");
                });

            modelBuilder.Entity("Tarazou4.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("QuestionCategory");
                });

            modelBuilder.Entity("Tarazou4.Entities.QuestionStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("QuestionStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.QuestionType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("Tarazou4.Entities.QuestionView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttachmentId");

                    b.Property<int>("ConsultantId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionView");
                });

            modelBuilder.Entity("Tarazou4.Entities.QueuedEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachedDownloadId");

                    b.Property<string>("AttachmentFileName");

                    b.Property<string>("AttachmentFilePath");

                    b.Property<string>("Bcc")
                        .HasMaxLength(500);

                    b.Property<string>("Body");

                    b.Property<string>("Cc")
                        .HasColumnName("CC")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DontSendBeforeDateUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("EmailAccountId");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("FromName")
                        .HasMaxLength(500);

                    b.Property<int>("PriorityId");

                    b.Property<string>("ReplyTo")
                        .HasMaxLength(500);

                    b.Property<string>("ReplyToName")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("SentOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("SentTries");

                    b.Property<string>("Subject")
                        .HasMaxLength(1000);

                    b.Property<string>("To")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ToName")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("EmailAccountId");

                    b.ToTable("QueuedEmail");
                });

            modelBuilder.Entity("Tarazou4.Entities.ReportQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConsultantId");

                    b.Property<DateTime>("Created");

                    b.Property<int>("QuestionId");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ReportQuestion");
                });

            modelBuilder.Entity("Tarazou4.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<bool?>("Deleted");

                    b.Property<bool>("IsSystemRole");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("SystemName")
                        .HasMaxLength(255);

                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Tarazou4.Entities.RoleType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("RoleType");
                });

            modelBuilder.Entity("Tarazou4.Entities.Satisfaction", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Score");

                    b.Property<int>("ScoreConsultant");

                    b.Property<bool>("Selected");

                    b.HasKey("Id");

                    b.ToTable("Satisfaction");
                });

            modelBuilder.Entity("Tarazou4.Entities.ScheduleTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enabled");

                    b.Property<DateTime?>("LastEndUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastStartUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastSuccessUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("LeasedByMachineName");

                    b.Property<DateTime?>("LeasedUntilUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Seconds");

                    b.Property<bool>("StopOnError");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ScheduleTask");
                });

            modelBuilder.Entity("Tarazou4.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("SettingModuleId");

                    b.Property<int?>("SiteId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("SettingModuleId");

                    b.HasIndex("SiteId");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("Tarazou4.Entities.SettingModule", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("SettingModule");
                });

            modelBuilder.Entity("Tarazou4.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("Price");

                    b.Property<int>("ProductId");

                    b.Property<int>("SiteId");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItem");
                });

            modelBuilder.Entity("Tarazou4.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(1000);

                    b.Property<string>("CompanyPhoneNumber")
                        .HasMaxLength(1000);

                    b.Property<int>("DefaultLanguageId");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Hosts")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("SecureUrl")
                        .HasMaxLength(400);

                    b.Property<bool>("SslEnabled");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("DefaultLanguageId");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("Tarazou4.Entities.SiteMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<int>("SiteId");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("EntityId", "EntityName")
                        .HasName("IX_StoreMapping_EntityId_EntityName");

                    b.ToTable("SiteMapping");
                });

            modelBuilder.Entity("Tarazou4.Entities.SmsAccount", b =>
                {
                    b.Property<int>("Id");

                    b.Property<long?>("Active");

                    b.Property<string>("Api")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("SmsAccountTypeId");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("SmsAccountTypeId");

                    b.ToTable("SmsAccount");
                });

            modelBuilder.Entity("Tarazou4.Entities.SmsAccountType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("SmsAccountType");
                });

            modelBuilder.Entity("Tarazou4.Entities.SmsPriority", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SmsPriority");
                });

            modelBuilder.Entity("Tarazou4.Entities.SmsQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsQueue");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("ReceiverUserId");

                    b.Property<int?>("SmsAccountId");

                    b.Property<int>("SmsPriorityId");

                    b.Property<int>("SmsStatusId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SmsPriorityId");

                    b.ToTable("SmsQueue");
                });

            modelBuilder.Entity("Tarazou4.Entities.SmsStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SmsStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.Template", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("EmailAccountId");

                    b.Property<bool>("IsFlash");

                    b.Property<bool>("IsFlashSupport");

                    b.Property<bool>("IsQueued");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("SmsAccountId");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<int>("TemplateTypeId");

                    b.Property<string>("Tokens")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EmailAccountId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SmsAccountId");

                    b.HasIndex("TemplateTypeId");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("Tarazou4.Entities.TemplateType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TemplateType");
                });

            modelBuilder.Entity("Tarazou4.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.Property<int>("TicketSectionId");

                    b.Property<int?>("TicketStatusId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TicketSectionId");

                    b.HasIndex("TicketStatusId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Tarazou4.Entities.TicketSection", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Email")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Sms")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TicketSection");
                });

            modelBuilder.Entity("Tarazou4.Entities.TicketStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TicketStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConsultantQuestionColorPrice");

                    b.Property<int?>("ConsultantScorePrice");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<int?>("CurrentConsultantScore");

                    b.Property<DateTime?>("ModifyTime");

                    b.Property<int?>("OrderConsultantId");

                    b.Property<int?>("OrderId");

                    b.Property<string>("Peygiri")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("Price");

                    b.Property<int?>("QuestionColor");

                    b.Property<int?>("QuestionColorPercent");

                    b.Property<int?>("QuestionId");

                    b.Property<string>("RefId")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("TransactionStatusId");

                    b.Property<int>("TransactionTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrderConsultantId");

                    b.HasIndex("OrderId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TransactionStatusId");

                    b.HasIndex("TransactionTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Tarazou4.Entities.TransactionStatus", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TransactionStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.TransactionType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("IsPositive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("Tarazou4.Entities.UrlRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EntityId");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("IsActive");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("Id");

                    b.HasIndex("Slug");

                    b.HasIndex("EntityId", "EntityName", "LanguageId", "IsActive")
                        .HasName("IX_UrlRecord_Custom_1");

                    b.ToTable("UrlRecord");
                });

            modelBuilder.Entity("Tarazou4.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int?>("CityId");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime");

                    b.Property<int>("Credit");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Email")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("Guid");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500);

                    b.Property<bool?>("IsSystemAccount");

                    b.Property<bool>("IsVerify");

                    b.Property<DateTimeOffset?>("LastLoginDate");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MobileVerificationCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("ProvinceId");

                    b.Property<string>("SystemName")
                        .HasMaxLength(400);

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Tarazou4.Entities.UserForgetPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("IsActive");

                    b.Property<int>("Type");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserForgetPassword");
                });

            modelBuilder.Entity("Tarazou4.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100);

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Gender");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("UserId");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Gender");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("Tarazou4.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Tarazou4.Entities.ActivityLog", b =>
                {
                    b.HasOne("Tarazou4.Entities.ActivityLogType", "ActivityLogType")
                        .WithMany("ActivityLog")
                        .HasForeignKey("ActivityLogTypeId")
                        .HasConstraintName("ActivityLog_ActivityLogType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("ActivityLog")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ActivityLog_Customer")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tarazou4.Entities.Answer", b =>
                {
                    b.HasOne("Tarazou4.Entities.Consultant", "Consultant")
                        .WithMany("Answer")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK_Answer_Consultant");

                    b.HasOne("Tarazou4.Entities.Question", "Question")
                        .WithMany("Answer")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Answer_Question");

                    b.HasOne("Tarazou4.Entities.Satisfaction", "Satisfaction")
                        .WithMany("Answer")
                        .HasForeignKey("SatisfactionId")
                        .HasConstraintName("FK_Answer_Satisfaction");

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("Answer")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Answer_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.AnswerAttachment", b =>
                {
                    b.HasOne("Tarazou4.Entities.Answer", "Answer")
                        .WithMany("AnswerAttachment")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK_AnswerAttachment_Answer");
                });

            modelBuilder.Entity("Tarazou4.Entities.AnswerConsultant", b =>
                {
                    b.HasOne("Tarazou4.Entities.Answer", "Answer")
                        .WithMany("AnswerConsultant")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK_AnswerConsultant_Answer");

                    b.HasOne("Tarazou4.Entities.Consultant", "Consultant")
                        .WithMany("AnswerConsultant")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK_AnswerConsultant_Consultant");

                    b.HasOne("Tarazou4.Entities.Question", "Question")
                        .WithMany("AnswerConsultant")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_AnswerConsultant_Question");

                    b.HasOne("Tarazou4.Entities.Satisfaction", "Satisfaction")
                        .WithMany("AnswerConsultant")
                        .HasForeignKey("SatisfactionId")
                        .HasConstraintName("FK_AnswerConsultant_Satisfaction");
                });

            modelBuilder.Entity("Tarazou4.Entities.City", b =>
                {
                    b.HasOne("Tarazou4.Entities.Province", "Province")
                        .WithMany("City")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_City_Province");
                });

            modelBuilder.Entity("Tarazou4.Entities.Consultant", b =>
                {
                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("Consultant")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Consultant_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.ConsultantQuestion", b =>
                {
                    b.HasOne("Tarazou4.Entities.Consultant", "Consultant")
                        .WithMany("ConsultantQuestion")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK_ConsultantQuestion_Consultant");

                    b.HasOne("Tarazou4.Entities.Question", "Question")
                        .WithMany("ConsultantQuestion")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_ConsultantQuestion_Question");

                    b.HasOne("Tarazou4.Entities.QuestionStatus", "QuestionStatus")
                        .WithMany("ConsultantQuestion")
                        .HasForeignKey("QuestionStatusId")
                        .HasConstraintName("FK_ConsultantQuestion_QuestionStatus");

                    b.HasOne("Tarazou4.Entities.ConsultantQuestionStatus", "Status")
                        .WithMany("ConsultantQuestion")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_ConsultantQuestion_ConsultantQuestionStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.ConsultantQuestionCategory", b =>
                {
                    b.HasOne("Tarazou4.Entities.Consultant", "Consultant")
                        .WithMany("ConsultantQuestionCategory")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK_Consultant_QuestionCategory_Consultant");

                    b.HasOne("Tarazou4.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany("ConsultantQuestionCategory")
                        .HasForeignKey("QuestionCategoryId")
                        .HasConstraintName("FK_Consultant_QuestionCategory_QuestionCategory");
                });

            modelBuilder.Entity("Tarazou4.Entities.ConsultantUpload", b =>
                {
                    b.HasOne("Tarazou4.Entities.Consultant", "Consultant")
                        .WithMany("ConsultantUpload")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK_ConsultantUpload_Consultant");

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("ConsultantUpload")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ConsultantUpload_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.Coupon", b =>
                {
                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("Coupon")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Coupon_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.EmailQueue", b =>
                {
                    b.HasOne("Tarazou4.Entities.EmailAccount", "EmailAccount")
                        .WithMany("EmailQueue")
                        .HasForeignKey("EmailAccountId")
                        .HasConstraintName("FK_EmailQueue_EmailAccount");

                    b.HasOne("Tarazou4.Entities.EmailPriority", "EmailPriority")
                        .WithMany("EmailQueue")
                        .HasForeignKey("EmailPriorityId")
                        .HasConstraintName("FK_EmailQueue_EmailPriority");

                    b.HasOne("Tarazou4.Entities.EmailStatus", "EmailStatus")
                        .WithMany("EmailQueue")
                        .HasForeignKey("EmailStatusId")
                        .HasConstraintName("FK_EmailQueue_EmailStatus");

                    b.HasOne("Tarazou4.Entities.User", "ReceiverUser")
                        .WithMany("EmailQueue")
                        .HasForeignKey("ReceiverUserId")
                        .HasConstraintName("FK_EmailQueue_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.ExternalAuthenticationRecord", b =>
                {
                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("ExternalAuthenticationRecord")
                        .HasForeignKey("UserId")
                        .HasConstraintName("ExternalAuthenticationRecord_Customer")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tarazou4.Entities.GenericAttribute", b =>
                {
                    b.HasOne("Tarazou4.Entities.Site", "Site")
                        .WithMany("GenericAttribute")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_GenericAttribute_Site");
                });

            modelBuilder.Entity("Tarazou4.Entities.GiftCard", b =>
                {
                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("GiftCard")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_GiftCard_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.GiftCardUsage", b =>
                {
                    b.HasOne("Tarazou4.Entities.GiftCard", "GiftCard")
                        .WithMany("GiftCardUsage")
                        .HasForeignKey("GiftCardId")
                        .HasConstraintName("GiftCardUsageHistory_GiftCard")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tarazou4.Entities.Order", "Order")
                        .WithMany("GiftCardUsage")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("GiftCardUsageHistory_UsedWithOrder")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tarazou4.Entities.LocaleStringResource", b =>
                {
                    b.HasOne("Tarazou4.Entities.Language", "Language")
                        .WithMany("LocaleStringResource")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("LocaleStringResource_Language")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tarazou4.Entities.LocaleStringResourceType", "LocaleStringResourceType")
                        .WithMany("LocaleStringResource")
                        .HasForeignKey("LocaleStringResourceTypeId")
                        .HasConstraintName("FK_LocaleStringResource_LocaleStringResourceType");
                });

            modelBuilder.Entity("Tarazou4.Entities.LocalizedProperty", b =>
                {
                    b.HasOne("Tarazou4.Entities.Language", "Language")
                        .WithMany("LocalizedProperty")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("LocalizedProperty_Language")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tarazou4.Entities.Log", b =>
                {
                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("Log")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Log_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.Order", b =>
                {
                    b.HasOne("Tarazou4.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Order")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK_Order_OrderStatus");

                    b.HasOne("Tarazou4.Entities.PaymentStatus", "PaymentStatus")
                        .WithMany("Order")
                        .HasForeignKey("PaymentStatusId")
                        .HasConstraintName("FK_Order_PaymentStatus");

                    b.HasOne("Tarazou4.Entities.Question", "Question")
                        .WithMany("Order")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Order_Question");

                    b.HasOne("Tarazou4.Entities.Site", "Site")
                        .WithMany("Order")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_Order_Site");

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Order_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.OrderConsultant", b =>
                {
                    b.HasOne("Tarazou4.Entities.Consultant", "Consultant")
                        .WithMany("OrderConsultant")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK_OrderConsultant_Consultant");

                    b.HasOne("Tarazou4.Entities.OrderStatus", "OrderStatus")
                        .WithMany("OrderConsultant")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK_OrderConsultant_OrderStatus");

                    b.HasOne("Tarazou4.Entities.TransactionStatus", "TransactionStatus")
                        .WithMany("OrderConsultant")
                        .HasForeignKey("TransactionStatusId")
                        .HasConstraintName("FK_OrderConsultant_TransactionStatus");

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("OrderConsultant")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_OrderConsultant_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.OrderItem", b =>
                {
                    b.HasOne("Tarazou4.Entities.Order", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("OrderItem_Order")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tarazou4.Entities.Question", "Product")
                        .WithMany("OrderItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("OrderItem_Product")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tarazou4.Entities.Permission", b =>
                {
                    b.HasOne("Tarazou4.Entities.PermissionType", "PermissionType")
                        .WithMany("Permission")
                        .HasForeignKey("PermissionTypeId")
                        .HasConstraintName("FK_Permission_PermissionType");
                });

            modelBuilder.Entity("Tarazou4.Entities.PermissionEntity", b =>
                {
                    b.HasOne("Tarazou4.Entities.Role", "Role")
                        .WithMany("PermissionEntity")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AclRecord_Role");
                });

            modelBuilder.Entity("Tarazou4.Entities.PermissionRole", b =>
                {
                    b.HasOne("Tarazou4.Entities.Permission", "Permission")
                        .WithMany("PermissionRole")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_PermissionRole_Permission");

                    b.HasOne("Tarazou4.Entities.Role", "Role")
                        .WithMany("PermissionRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_PermissionRole_Role");
                });

            modelBuilder.Entity("Tarazou4.Entities.Question", b =>
                {
                    b.HasOne("Tarazou4.Entities.QuestionStatus", "LastStatus")
                        .WithMany("Question")
                        .HasForeignKey("LastStatusId")
                        .HasConstraintName("FK_Question_QuestionStatus");

                    b.HasOne("Tarazou4.Entities.QuestionCategory", "QuestionCategory")
                        .WithMany("Question")
                        .HasForeignKey("QuestionCategoryId")
                        .HasConstraintName("FK_Question_QuestionCategory");

                    b.HasOne("Tarazou4.Entities.QuestionType", "QuestionType")
                        .WithMany("Question")
                        .HasForeignKey("QuestionTypeId")
                        .HasConstraintName("FK_Question_QuestionType");

                    b.HasOne("Tarazou4.Entities.Consultant", "SelectConsultant")
                        .WithMany("Question")
                        .HasForeignKey("SelectConsultantId")
                        .HasConstraintName("FK_Question_Consultant");

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("Question")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Question_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.QuestionAttachment", b =>
                {
                    b.HasOne("Tarazou4.Entities.Question", "Question")
                        .WithMany("QuestionAttachment")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_QuestionAttachment_Question");
                });

            modelBuilder.Entity("Tarazou4.Entities.QuestionView", b =>
                {
                    b.HasOne("Tarazou4.Entities.QuestionAttachment", "Attachment")
                        .WithMany("QuestionView")
                        .HasForeignKey("AttachmentId")
                        .HasConstraintName("FK_QuestionView_QuestionAttachment");

                    b.HasOne("Tarazou4.Entities.Consultant", "Consultant")
                        .WithMany("QuestionView")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK_QuestionView_Consultant");

                    b.HasOne("Tarazou4.Entities.Question", "Question")
                        .WithMany("QuestionView")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_QuestionView_Question");
                });

            modelBuilder.Entity("Tarazou4.Entities.QueuedEmail", b =>
                {
                    b.HasOne("Tarazou4.Entities.EmailAccount", "EmailAccount")
                        .WithMany("QueuedEmail")
                        .HasForeignKey("EmailAccountId")
                        .HasConstraintName("QueuedEmail_EmailAccount")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tarazou4.Entities.ReportQuestion", b =>
                {
                    b.HasOne("Tarazou4.Entities.Consultant", "Consultant")
                        .WithMany("ReportQuestion")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK_ReportQuestion_Consultant");

                    b.HasOne("Tarazou4.Entities.Question", "Question")
                        .WithMany("ReportQuestion")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_ReportQuestion_Question");
                });

            modelBuilder.Entity("Tarazou4.Entities.Role", b =>
                {
                    b.HasOne("Tarazou4.Entities.RoleType", "Type")
                        .WithMany("Role")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Role_RoleType");
                });

            modelBuilder.Entity("Tarazou4.Entities.Setting", b =>
                {
                    b.HasOne("Tarazou4.Entities.SettingModule", "SettingModule")
                        .WithMany("Setting")
                        .HasForeignKey("SettingModuleId")
                        .HasConstraintName("FK_Setting_SettingModule");

                    b.HasOne("Tarazou4.Entities.Site", "Site")
                        .WithMany("Setting")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_Setting_Site");
                });

            modelBuilder.Entity("Tarazou4.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("Tarazou4.Entities.Question", "Product")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ShoppingCartItem_Product");

                    b.HasOne("Tarazou4.Entities.Site", "Site")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_ShoppingCartItem_Site");

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("ShoppingCartItem")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ShoppingCartItem_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.Site", b =>
                {
                    b.HasOne("Tarazou4.Entities.Language", "DefaultLanguage")
                        .WithMany("Site")
                        .HasForeignKey("DefaultLanguageId")
                        .HasConstraintName("FK_Portal_Language");
                });

            modelBuilder.Entity("Tarazou4.Entities.SiteMapping", b =>
                {
                    b.HasOne("Tarazou4.Entities.Site", "Site")
                        .WithMany("SiteMapping")
                        .HasForeignKey("SiteId")
                        .HasConstraintName("FK_SiteMapping_Site");
                });

            modelBuilder.Entity("Tarazou4.Entities.SmsAccount", b =>
                {
                    b.HasOne("Tarazou4.Entities.SmsAccountType", "SmsAccountType")
                        .WithMany("SmsAccount")
                        .HasForeignKey("SmsAccountTypeId")
                        .HasConstraintName("FK_SmsAccount_SmsAccountType");
                });

            modelBuilder.Entity("Tarazou4.Entities.SmsQueue", b =>
                {
                    b.HasOne("Tarazou4.Entities.User", "CreatedByNavigation")
                        .WithMany("SmsQueueCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_SmsQueue_User");

                    b.HasOne("Tarazou4.Entities.User", "ModifiedByNavigation")
                        .WithMany("SmsQueueModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_SmsQueue_User1");

                    b.HasOne("Tarazou4.Entities.SmsPriority", "SmsPriority")
                        .WithMany("SmsQueue")
                        .HasForeignKey("SmsPriorityId")
                        .HasConstraintName("FK_SmsQueue_SmsPriority");
                });

            modelBuilder.Entity("Tarazou4.Entities.Template", b =>
                {
                    b.HasOne("Tarazou4.Entities.User", "CreatedByNavigation")
                        .WithMany("TemplateCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Template_User");

                    b.HasOne("Tarazou4.Entities.EmailAccount", "EmailAccount")
                        .WithMany("Template")
                        .HasForeignKey("EmailAccountId")
                        .HasConstraintName("FK_Template_EmailAccount");

                    b.HasOne("Tarazou4.Entities.User", "ModifiedByNavigation")
                        .WithMany("TemplateModifiedByNavigation")
                        .HasForeignKey("ModifiedBy")
                        .HasConstraintName("FK_Template_User1");

                    b.HasOne("Tarazou4.Entities.SmsAccount", "SmsAccount")
                        .WithMany("Template")
                        .HasForeignKey("SmsAccountId")
                        .HasConstraintName("FK_Template_SmsAccount");

                    b.HasOne("Tarazou4.Entities.TemplateType", "TemplateType")
                        .WithMany("Template")
                        .HasForeignKey("TemplateTypeId")
                        .HasConstraintName("FK_Template_TemplateType");
                });

            modelBuilder.Entity("Tarazou4.Entities.Ticket", b =>
                {
                    b.HasOne("Tarazou4.Entities.TicketSection", "TicketSection")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketSectionId")
                        .HasConstraintName("FK_Ticket_TicketSection");

                    b.HasOne("Tarazou4.Entities.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("TicketStatusId")
                        .HasConstraintName("FK_Ticket_TicketStatus");
                });

            modelBuilder.Entity("Tarazou4.Entities.Transaction", b =>
                {
                    b.HasOne("Tarazou4.Entities.OrderConsultant", "OrderConsultant")
                        .WithMany("Transaction")
                        .HasForeignKey("OrderConsultantId")
                        .HasConstraintName("FK_Transaction_OrderConsultant");

                    b.HasOne("Tarazou4.Entities.Order", "Order")
                        .WithMany("Transaction")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Transaction_Invoice");

                    b.HasOne("Tarazou4.Entities.Question", "Question")
                        .WithMany("Transaction")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Transaction_Question");

                    b.HasOne("Tarazou4.Entities.TransactionStatus", "TransactionStatus")
                        .WithMany("Transaction")
                        .HasForeignKey("TransactionStatusId")
                        .HasConstraintName("FK_Transaction_TransactionStatus");

                    b.HasOne("Tarazou4.Entities.TransactionType", "TransactionType")
                        .WithMany("Transaction")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("FK_Transaction_TransactionType");

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("Transaction")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Transaction_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.User", b =>
                {
                    b.HasOne("Tarazou4.Entities.City", "City")
                        .WithMany("User")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_User_City");

                    b.HasOne("Tarazou4.Entities.Province", "Province")
                        .WithMany("User")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_User_Province");
                });

            modelBuilder.Entity("Tarazou4.Entities.UserForgetPassword", b =>
                {
                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("UserForgetPassword")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserForgetPassword_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.UserProfile", b =>
                {
                    b.HasOne("Tarazou4.Entities.Gender", "GenderNavigation")
                        .WithMany("UserProfile")
                        .HasForeignKey("Gender")
                        .HasConstraintName("FK_UserProfile_Gender");

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("UserProfile")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserProfile_User");
                });

            modelBuilder.Entity("Tarazou4.Entities.UserRole", b =>
                {
                    b.HasOne("Tarazou4.Entities.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("Tarazou4.Entities.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User");
                });
#pragma warning restore 612, 618
        }
    }
}
